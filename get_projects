#!/usr/bin/env node
const path = require('path')
const fetch = require('node-fetch')
const yaml = require('yaml')
const fs = require('fs')
const util = require('util')
const accessPromise = util.promisify(fs.access)

const imageThumbnail = require('image-thumbnail')

;(async () => {
  const csv = await fs.promises.readFile('projects_okhs.csv', 'utf-8')
  let projects = await Promise.all(
    csv
      .split('\n')
      .slice(1)
      .map(async (line, index) => {
        const [name, date, link] = line.split(',')
        if (link) {
          console.warn('FETCHING', link)
          return fetchText(link)
            .then(text => {
              const origin = path.dirname(link) + '/'
              return { id: index, origin, ...yaml.parse(text) }
            })
            .catch(e => {
              console.warn('--------------------------------------------')
              console.warn(e)
              console.warn('............................................')
              console.warn('Error reading:', link)
              console.warn('--------------------------------------------')
            })
        }
      }),
  )
  // remove null/undefined
  projects = projects.filter(x => x)
  projects = projects.map(processUrls)
  // remove null/undefined
  projects = projects.filter(x => x)
  shuffleArray(projects)
  projects = await Promise.all(
    projects.map(p =>
      processImage(p).catch(e => {
        console.warn('FAILED', p.image)
        return { ...p, image: null }
      }),
    ),
  )
  console.log(JSON.stringify(projects, null, 2))
})()

async function fetchText(link) {
  link = link.trim()
  if (link.startsWith('local-manifests/')) {
    return fs.promises.readFile(link, 'utf-8')
  }
  // just checking it's a valid url
  new URL(link)
  // actually fetch it
  return fetch(link).then(r => {
    if (r.status !== 200) {
      throw Error(r.status)
    }
    return r.text()
  })
}

function processUrls(project) {
  let origin = project.origin.trim()
  if (origin === 'local-manifests/') {
    origin = 'https://search.openknowhow.org'
  }
  const docHome = project['documentation-home'] || project['project-link']
  if (docHome == null) {
    console.warn('--------------------------------------------')
    console.warn(
      `No link available for project - title: "${
        project.title
      }", CSV line number: ${project.id + 2}`,
    )
    console.warn('--------------------------------------------')
    return
  }
  project['documentation-home'] = new URL(docHome, origin).href
  let image = project.image
  if (image) {
    project.image = new URL(image, origin).href
  }
  return project
}

async function processImage(project) {
  let image = project.image

  if (!image) {
    return project
  }

  let ext = path.extname(image).toLowerCase()
  // remove any query parameters if there are any
  ext = ext.split('?')[0]

  const imageUrl = `images/${project.id}${ext}`
  project.image = imageUrl
  const imagePath = path.join('public', imageUrl)

  const doesExist = await exists(imagePath)
  if (doesExist) {
    return project
  }

  const r = await fetch(image).catch(e => {
    console.warn('--------------------------------------------')
    console.warn(e)
    console.warn('--------------------------------------------')
    return {}
  })

  if (!r.ok || !/^image\//.test(r.headers.get('Content-Type')) || r.body == null) {
    console.warn("Can't read image:", image)
    return { ...project, image: null }
  } else {
    try {
      console.warn(image)
      const body = await r.buffer()
      const thumb = await imageThumbnail(body, {
        height: 200,
        width: 290,
        fit: 'outside',
      })
      await fs.promises.writeFile(imagePath, thumb)
    } catch (e) {
      console.warn('--------------------------------------------')
      console.warn(e)
      console.warn('............................................')
      console.warn("Can't write thumbnail for:", image)
      console.warn('--------------------------------------------')
      return { ...project, image: null }
    }
  }
  return project
}

function exists(file) {
  return accessPromise(file, fs.constants.F_OK)
    .then(x => x == null)
    .catch(err => {
      if (err.code === 'ENOENT') {
        return false
      } else {
        throw err
      }
    })
}

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    // eslint-disable-next-line no-param-reassign
    ;[array[i], array[j]] = [array[j], array[i]]
  }
}
